if getgenv().SYRIANLOADED then
	return
end

--//Services
local Game = game
local ProtectedUI = gethui()
local Players = Game:GetService("Players")
local ReplicatedStorage = Game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local ScriptContext = game:GetService("ScriptContext")
local Workspace = workspace

--//Libraries
local Orion = loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Orion/main/source"))()

--//Variables
local OrionUI = ProtectedUI.Orion
local LocalPlayer = Players.LocalPlayer
local Error = ScriptContext.Error
local CurrentCamera = Workspace.CurrentCamera

Orion:MakeNotification({
	Name = "Welcome, ".. LocalPlayer.DisplayName,
	Content = "Created by Katrist#3130, feel free to DM me for any suggestions.",
	Image = "rbxassetid://4483345998",
	Time = 10
})

local Window = Orion:MakeWindow({
	Name = "Syrian Shenanigans", 
	HidePremium = false, 
	SaveConfig = true,
	ConfigFolder = "SyrianConfigs",
	IntroText = "Syrian Shenanigans"
})

local Player = Window:MakeTab({
	Name = "Player",
	Icon = "rbxassetid://10289431512",
	PremiumOnly = false
})

local MainPlayer = Player:AddSection({
	Name = "Main"
})

local Classes = Window:MakeTab({
	Name = "Classes",
	Icon = "rbxassetid://10289436627",
	PremiumOnly = false
})

local MainClasses = Classes:AddSection({
	Name = "Main"
})

local Teleports = Window:MakeTab({
	Name = "Teleports",
	Icon = "rbxassetid://10287452656",
	PremiumOnly = false
})

local MainTeleports = Teleports:AddSection({
	Name = "Main"
})

local FunTeleports = Teleports:AddSection({
	Name = "Fun"
})

local MiscTeleports = Teleports:AddSection({
	Name = "Miscellaneous"
})

local Teams = Window:MakeTab({
	Name = "Teams",
	Icon = "rbxassetid://10289447310",
	PremiumOnly = false
})

local MainTeams = Teams:AddSection({
	Name = "Main"
})

local Controls = Window:MakeTab({
	Name = "Settings",
	Icon = "rbxassetid://10289452553",
	PremiumOnly = false
})

local MainControls = Controls:AddSection({
	Name = "Main"
})

local MiscControls = Controls:AddSection({
	Name = "Miscellaneous"
})

local Credits = Window:MakeTab({
	Name = "Credits",
	Icon = "rbxassetid://10289456215",
	PremiumOnly = false
})

local MainCredits = Credits:AddSection({
	Name = "Main"
})

--//Controls
local fly = false
local flySpeed = 16
local flySpeedDebounce = false
local speedBypass = false
local speed = 16
local speedDebounce = false
local noFallDamage = false
local class = nil
local destination = nil

--//Tables
local Connections = {}

--//Functions
local function Notify(title, text)
	Orion:MakeNotification({
		Name = title,
		Content = text,
		Image = "rbxassetid://4483345998",
		Time = 5
	})
end

local function GetClass(className)
	local Map = Workspace.Map
	local Folder = LocalPlayer.Team == Game.Teams.greeners and Map:WaitForChild("greeners spawn") or LocalPlayer.Team == Game.Teams.sandoids and Map:WaitForChild("sandoids spawn")

	local classBoxes = {} 

	for i, child in ipairs(Folder:GetChildren()) do
		if child.Name == "ClassBox" then
			table.insert(classBoxes, child)
		end
	end

	local gunModel = nil

	for i, classBox in ipairs(classBoxes) do
		local classGunModel = classBox:FindFirstChild(className)

		if not classGunModel then
			continue
		end

		gunModel = classGunModel
	end

	fireclickdetector(gunModel.ClickDetector)
end

local function Teleport(CFrame)
	if not LocalPlayer.Character then
		return
	end

	LocalPlayer.Character:PivotTo(CFrame)
end

local function Sit(seat)
	local Humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid")

	if not Humanoid or Humanoid:GetState() == Enum.HumanoidStateType.Dead then
		Notify("Unable to sit Humanoid", "Please try again later.")

		return
	end

	if Humanoid.Sit then
		Humanoid.Sit = false

		task.wait(0.1)
	end

	seat:Sit(Humanoid)
end

local function TeleportToHelicopter(isTeam)
	local Map = Workspace.Map
	local base = isTeam and (LocalPlayer.Team == Game.Teams.greeners and Map:WaitForChild("greeners spawn") or LocalPlayer.Team == Game.Teams.sandoids and Map:WaitForChild("sandoids spawn"))
		or LocalPlayer.Team == Game.Teams.greeners and Map:WaitForChild("sandoids spawn") or LocalPlayer.Team == Game.Teams.sandoids and Map:WaitForChild("greeners spawn")

	local helicopterSpawn = base:WaitForChild("Helikopter spawn")
	local foundHelicopter = helicopterSpawn:FindFirstChild("helikopter")
	local functionality = foundHelicopter and foundHelicopter:FindFirstChild("Functionality")

	if not functionality then
		Notify("Helicopter could not be found", "Please try again later.")

		return
	end

	local foundSeat = false
	local pilotSeat = functionality.Pilot

	if not pilotSeat.Occupant then
		foundSeat = true

		Sit(pilotSeat)

		return
	end

	for i, descendant in ipairs(foundHelicopter:GetDescendants()) do
		if descendant:IsA("Seat") and not descendant.Occupant then
			foundSeat = true

			Sit(descendant)

			return
		end
	end

	if foundSeat then
		return
	end

	Teleport(foundHelicopter.Parts.Body.Main:GetPivot() + Vector3.new(0, 2, 0))
end

local function NoFallDamage(HumanoidRootPart)
	local mt = getrawmetatable(game)
	local oldindex = mt.__index
	setreadonly(mt, false)

	mt.__index = newcclosure(function(indexed, property)
		if noFallDamage and indexed == HumanoidRootPart and property == "Velocity" then
			return Vector3.zero
		end

		return oldindex(indexed, property)
	end)

	setreadonly(mt, true)
end

local function SpeedBypass()
	Connections.SpeedBypass = RunService.Stepped:Connect(function()
		local Humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid")

		if Humanoid and Humanoid.MoveDirection.Magnitude > 0 then
			LocalPlayer.Character:TranslateBy(speed/60 * Humanoid.MoveDirection)
		end
	end)
end

local function Fly()
	if LocalPlayer.Character then
		local Humanoid = LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid")
		
		if Humanoid then
			Humanoid.PlatformStand = true
		end
		
		local Head = LocalPlayer.Character:FindFirstChild("Head")
		
		if Head then
			Head.Anchored = true
		end
	end
	
	Connections.Fly = RunService.Stepped:Connect(function(deltaTime)
		if not LocalPlayer.Character then
			return
		end
		
		local Humanoid = LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid")
		local Head = LocalPlayer.Character:FindFirstChild("Head")
		
		if not Humanoid or not Head then
			return
		end
		
		local moveDirection = Humanoid.MoveDirection * (flySpeed/1200 * deltaTime)
		local cameraCFrame = CurrentCamera.CFrame
		local cameraOffset = Head.CFrame:ToObjectSpace(cameraCFrame).Position
		cameraCFrame *= CFrame.new(-cameraOffset.X, -cameraOffset.Y, -cameraOffset.Z + 1)
		
		local headPosition = Head.CFrame.Position
		local cameraPosition = cameraCFrame.Position
		
		local objectSpaceVelocity = CFrame.new(cameraPosition, Vector3.new(headPosition.X, cameraPosition.Y, headPosition.Z)):VectorToObjectSpace(moveDirection)
		Head.CFrame = CFrame.new(headPosition) * (cameraCFrame - cameraPosition) * CFrame.new(objectSpaceVelocity)
	end)
end

local ClassFunctions = {
	["Machine Gunner"] = function()
		GetClass("Machine Gunner")
	end,

	Tanker = function()
		GetClass("Tanker")
	end,

	Marksman = function()
		GetClass("Sniper")
	end,

	Rifleman = function()
		GetClass("Infantry")
	end,

	["Anti Tank"] = function()
		GetClass("Anti Tank")
	end,
}

local TeleportFunctions = {
	A = function()
		Teleport(CFrame.new(953.263733, 48.8458405, -1388.88696, -0.999710679, 0.0239229836, 0.0025293231, 0.0238033403, 0.99892199, -0.0398465917, -0.00347984955, -0.0397748314, -1))
	end,

	B = function()
		Teleport(CFrame.new(618.627197, 27.1264309, -715.308167, 0.0871893987, 7.4505806e-09, -0.996192098, 2.89292075e-08, 0.999999464, -3.7252903e-09, 0.996191919, 2.81725079e-08, 0))
	end,

	C = function()
		Teleport(CFrame.new(437.001617, 5.46249237, -54.3074951, 0.906297863, 9.53457189e-08, -0.422642976, 1.23979049e-07, 0.999996781, 4.02618312e-08, 0.422642767, 8.88878091e-08, 1))
	end,

	["greeners base"] = function()
		Teleport(CFrame.new(1900.40857, 5.43672743, -234.046738, -1, -2.47957388e-07, -2.98022638e-08, -2.47957388e-07, 1, 8.0523904e-08, 2.98022389e-08, 8.05239111e-08, -1))
	end,

	["sandoids base"] = function()
		Teleport(CFrame.new(-252.102463, 5.44453182, -1701.30249, 0.999999881, 4.79958514e-15, 1.0658141e-14, 4.79958514e-15, 1, 1.27886653e-29, 1.0658141e-14, 1.27886653e-29, 1))
	end,

	["Team Helicopter"] = function()
		TeleportToHelicopter(true)
	end,

	["Enemy Helicopter"] = function()
		TeleportToHelicopter(false)
	end,

	Tower = function()
		Teleport(CFrame.new(927.54303, 110.004189, -1364.21716, 1, 0, 0, 0, 1, 0, 0, 0, 1))
	end,

	Church = function()
		Teleport(CFrame.new(961.899963, 5.02499914, -741.100037, 0, 0, -1, 0, 1, 0, 1, 0, 0))
	end,
}

RunService.Stepped:Connect(function()
	for i, connection in pairs(getconnections(Error)) do
		connection:Disable()
	end
end)

MainPlayer:AddToggle({
	Name = "Fly",
	Default = false,
	Save = true,
	Flag = "Fly",
	Callback = function(bool)
		fly = bool

		if fly then
			local FlySpeed = Orion.Flags.FlySpeed

			if FlySpeed then
				FlySpeed:Set(flySpeed)
			end

			Fly()
		else
			local connection = Connections.Fly

			if connection then
				connection:Disconnect()
			end

			local FlySpeed = Orion.Flags.FlySpeed

			if FlySpeed then
				local oldSpeed = flySpeed

				FlySpeed:Set(16)
				flySpeed = oldSpeed
			end
			
			if LocalPlayer.Character then
				local Humanoid = LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid")
				
				if Humanoid then
					Humanoid.PlatformStand = false
				end
				
				local Head = LocalPlayer.Character:FindFirstChild("Head")
				
				if Head then
					Head.Anchored = false
				end
			end
		end
	end
})

MainPlayer:AddSlider({
	Name = "Fly Speed",
	Save = true,
	Flag = "FlySpeed",
	Min = 16,
	Max = 100,
	Default = 16,
	Color = Color3.fromRGB(141, 141, 141),
	Increment = 2,
	ValueName = "",
	Callback = function(value)
		if value ~= 16 and not fly then
			Orion.Flags.FlySpeed:Set(16)
			flySpeed = value

			if flySpeedDebounce then
				return
			end

			flySpeedDebounce = true

			Notify("Could not change fly speed", "Fly must be enabled for fly speed changes.")

			task.wait(3)
			flySpeedDebounce = false

			return
		end

		flySpeed = value
	end
})

MainPlayer:AddToggle({
	Name = "Speed Bypass",
	Default = false,
	Save = true,
	Flag = "SpeedBypass",
	Callback = function(bool)
		speedBypass = bool

		if speedBypass then
			local Speed = Orion.Flags.Speed

			if Speed then
				Speed:Set(speed)
			end

			SpeedBypass()
		else	
			local connection = Connections.SpeedBypass

			if connection then
				connection:Disconnect()
			end

			local Speed = Orion.Flags.Speed

			if Speed then
				local oldSpeed = speed

				Speed:Set(16)
				speed = oldSpeed
			end
		end
	end
})

MainPlayer:AddSlider({
	Name = "Speed",
	Save = true,
	Flag = "Speed",
	Min = 16,
	Max = 100,
	Default = 16,
	Color = Color3.fromRGB(141, 141, 141),
	Increment = 2,
	ValueName = "",
	Callback = function(value)
		if value ~= 16 and not speedBypass then
			Orion.Flags.Speed:Set(16)
			speed = value

			if speedDebounce then
				return
			end

			speedDebounce = true

			Notify("Could not change speed", "Speed bypass must be enabled for speed changes.")

			task.wait(3)
			speedDebounce = false

			return
		end

		speed = value
	end
})

MainPlayer:AddToggle({
	Name = "No Fall Damage",
	Default = false,
	Save = true,
	Flag = "FallDamage",
	Callback = function(bool)
		noFallDamage = bool

		if noFallDamage then
			local HumanoidRootPart = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")

			if HumanoidRootPart then
				NoFallDamage(HumanoidRootPart)
			end

			Connections.FallDamage = LocalPlayer.CharacterAdded:Connect(function(character)
				local HumanoidRootPart = character:WaitForChild("HumanoidRootPart")	
				NoFallDamage(HumanoidRootPart)
			end)
		else
			local connection = Connections.FallDamage

			if connection then
				connection:Disconnect()
			end
		end
	end
})

MainClasses:AddButton({
	Name = "Machine Gunner",
	Flag = "MachineGunner",
	Callback = function()
		ClassFunctions["Machine Gunner"]()
	end
})

MainClasses:AddButton({
	Name = "Tanker",
	Flag = "Tanker",
	Callback = function()
		ClassFunctions.Tanker()
	end
})

MainClasses:AddButton({
	Name = "Marksman",
	Flag = "Marksman",
	Callback = function()
		ClassFunctions.Marksman()
	end
})

MainClasses:AddButton({
	Name = "Rifleman",
	Flag = "Rifleman",
	Callback = function()
		ClassFunctions.Rifleman()
	end
})

MainClasses:AddButton({
	Name = "Anti Tank",
	Flag = "AntiTank",
	Callback = function()
		ClassFunctions["Anti Tank"]()
	end
})

MainTeleports:AddButton({
	Name = "A",
	Flag = "A",
	Callback = function()
		TeleportFunctions.A()
	end
})

MainTeleports:AddButton({
	Name = "B",
	Flag = "B",
	Callback = function()
		TeleportFunctions.B()
	end
})

MainTeleports:AddButton({
	Name = "C",
	Flag = "C",
	Callback = function()
		TeleportFunctions.C()
	end
})

MainTeleports:AddButton({
	Name = "greeners base",
	Flag = "greeners base",
	Callback = function()
		TeleportFunctions["greeners base"]()
	end
})

MainTeleports:AddButton({
	Name = "sandoids base",
	Flag = "sandoids base",
	Callback = function()
		TeleportFunctions["sandoids base"]()
	end
})

FunTeleports:AddButton({
	Name = "Team Helicopter",
	Flag = "Team Helicopter",
	Callback = function()
		TeleportFunctions["Team Helicopter"]()
	end
})

FunTeleports:AddButton({
	Name = "Enemy Helicopter",
	Flag = "Enemy Helicopter",
	Callback = function()
		TeleportFunctions["Enemy Helicopter"]()
	end
})

MiscTeleports:AddButton({
	Name = "Tower",
	Flag = "Tower",
	Callback = function()
		TeleportFunctions.Tower()
	end
})

MiscTeleports:AddButton({
	Name = "Church",
	Flag = "Church",
	Callback = function()
		TeleportFunctions.Church()
	end
})

MainTeams:AddButton({
	Name = "greeners",
	Flag = "greeners",
	Callback = function()
		ReplicatedStorage.ChangeTeam:FireServer(BrickColor.new(323))
	end
})

MainTeams:AddButton({
	Name = "sandoids",
	Flag = "sandoids",
	Callback = function()
		ReplicatedStorage.ChangeTeam:FireServer(BrickColor.new(226))
	end
})

MainControls:AddBind({
	Name = "Hide UI",
	Default = Enum.KeyCode.F2,
	Save = true,
	Flag = "HideUI",
	Hold = false,
	Callback = function()
		local MainFrame = nil

		for i, child in ipairs(OrionUI:GetChildren()) do
			if child:FindFirstChildWhichIsA("UIListLayout") then
				continue
			end

			MainFrame = child
		end

		MainFrame.Visible = not MainFrame.Visible

		if MainFrame.Visible then
			return
		end

		Notify("UI hidden", "Press your keybind again to re-enable the UI.")
	end  
})

MainControls:AddToggle({
	Name = "Show Notifications",
	Default = true,
	Save = true,
	Flag = "ShowNotifications",
	Callback = function(bool)
		local MainFrame = nil

		for i, child in ipairs(OrionUI:GetChildren()) do
			if not child:FindFirstChildWhichIsA("UIListLayout") then
				continue
			end

			MainFrame = child
		end

		MainFrame.Visible = bool
	end
})

MiscControls:AddBind({
	Name = "Become Selected Class",
	Default = Enum.KeyCode.F3,
	Save = true,
	Flag = "BecomeSelectedClass",
	Hold = false,
	Callback = function()
		if not class then
			return
		end

		ClassFunctions[class]()
	end  
})

MiscControls:AddDropdown({
	Name = "Classes",
	Default = "Rifleman",
	Save = true,
	Flag = "Classes",
	Options = {
		"Machine Gunner", 
		"Tanker", 
		"Marksman",
		"Rifleman",
		"Anti Tank",
	},

	Callback = function(selection)
		class = selection
	end
})

MiscControls:AddBind({
	Name = "Teleport To Destination",
	Default = Enum.KeyCode.F4,
	Save = true,
	Flag = "TeleportToDestination",
	Hold = false,
	Callback = function()
		if not destination then
			return
		end

		TeleportFunctions[destination]()
	end  
})

MiscControls:AddDropdown({
	Name = "Teleports",
	Default = "A",
	Save = true,
	Flag = "Teleports",
	Options = {
		"A", 
		"B", 
		"C",
		"greeners base",
		"sandoids base",
		"Team Helicopter",
		"Enemy Helicopter",
		"Tower",
		"Church"
	},

	Callback = function(selection)
		destination = selection
	end
})

MainCredits:AddParagraph(
	"Katrist",
	"Scripted the functions."
)

Orion:Init()

getgenv().SYRIANLOADED = true
