--//Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

--//Variables
local LocalPlayer = Players.LocalPlayer
local Library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/AikaV3rm/UiLib/master/Lib.lua')))()
local CurrentCamera = workspace.CurrentCamera

--//Controls
local WalkSpeed = LocalPlayer.Character.Humanoid.WalkSpeed
local TeleportWalk = false
local Fly = false
local Tracers = false
local NoClip = false
local OriginalPivot

--//Tables
local Connections = {}
local PlayerTable = {}

--//Initialization
local Window = Library:CreateWindow("Katrist's Script Hub")

local Player = Window:CreateFolder("Player")
local Explorer = Window:CreateFolder("Workspace")
local Visuals = Window:CreateFolder("Visuals")
local Credits = Window:CreateFolder("Credits")
local KillSwitches = Window:CreateFolder("KillSwitches")

for i, Player in ipairs(Players:GetPlayers()) do
	if Player ~= LocalPlayer then
		table.insert(PlayerTable, Player.Name .. " (" .. Player.DisplayName .. ")")
	end
end

--//Disable Connections
for i, Connection in pairs(getconnections(LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("WalkSpeed"))) do
	Connection:Disable()
end

for i, Connection in pairs(getconnections(LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("JumpHeight"))) do
	Connection:Disable()
end

for i, Connection in pairs(getconnections(LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("UseJumpPower"))) do
	Connection:Disable()
end

for i, Connection in pairs(getconnections(LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("MoveDirection"))) do
	Connection:Disable()
end

for i, Connection in pairs(getconnections(LocalPlayer.Character.Humanoid.StateChanged)) do
	Connection:Disable()
end

for i, Connection in pairs(getconnections(LocalPlayer.Character.Humanoid.StateEnabledChanged)) do
	Connection:Disable()
end

for i, Connection in pairs(getconnections(workspace:GetPropertyChangedSignal("Gravity"))) do
	Connection:Disable()
end

--//Local Functions
local function ToggleSpeed(Value)
	if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
		if Connections["WalkSpeed"] then
			Connections["WalkSpeed"]:Disconnect()
		end

		WalkSpeed = Value

		Connections["WalkSpeed"] = RunService.Stepped:Connect(function()
			if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") and not TeleportWalk then
				local Humanoid = LocalPlayer.Character.Humanoid

				Humanoid.WalkSpeed = Value
			end
		end)
	end
end

local function ToggleJump(Value)
	if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
		if Connections["JumpHeight"] then
			Connections["JumpHeight"]:Disconnect()
		end
		
		if Connections["EnableJump"] then
			Connections["EnableJump"]:Disconnect()
		end

		Connections["JumpHeight"] = RunService.Stepped:Connect(function()
			if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
				local Humanoid = LocalPlayer.Character.Humanoid
				
				Humanoid.UseJumpPower = false
				Humanoid.JumpHeight = Value
			end
		end)
		
		Connections["EnableJump"] = UserInputService.JumpRequest:Connect(function()
			local Humanoid = LocalPlayer.Character.Humanoid
			
			Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
		end)
	end
end

local function ToggleTeleportWalk()
	if TeleportWalk then
		LocalPlayer.Character.Humanoid.WalkSpeed = 16

		Connections["TeleportWalk"] = RunService.Stepped:Connect(function()
			if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") and LocalPlayer.Character.Humanoid.MoveDirection.Magnitude > 0 then
				LocalPlayer.Character:TranslateBy(LocalPlayer.Character.Humanoid.MoveDirection * (WalkSpeed/60))
			end
		end) 
	else
		Connections["TeleportWalk"]:Disconnect()

		if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
			LocalPlayer.Character.Humanoid.WalkSpeed = WalkSpeed
		else
			LocalPlayer.CharacterAdded:Wait()
			local Humanoid = LocalPlayer.Character:WaitForChild("Humanoid")

			if Humanoid then
				Humanoid.WalkSpeed = WalkSpeed
			end
		end
	end
end

local function ToggleFly()
	if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
		local Humanoid = LocalPlayer.Character.Humanoid

		if Connections["Gravity"] then
			Connections["Gravity"]:Disconnect()
		end

		if Fly then
			Humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, false)
			Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)

			Humanoid:ChangeState(Enum.HumanoidStateType.Swimming)

			Connections["Gravity"] = RunService.Stepped:Connect(function()
				workspace.Gravity = 0
			end)
		else
			Humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, true)
			Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)

			workspace.Gravity = 196.2
		end
	end
end

local function ToggleFollow(Victim)
	if Connections["Follow"] then
		Connections["Follow"]:Disconnect()
	end
	
	OriginalPivot = LocalPlayer.Character:GetPivot()
	
	Connections["Follow"] = RunService.Stepped:Connect(function()
		if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
			LocalPlayer.Character.Humanoid.Sit = false
			LocalPlayer.Character:PivotTo(Victim.Character:GetPivot())			
		end
	end)
end

local function ToggleNoClip()
	if LocalPlayer.Character then
		if NoClip then
			Connections["NoClipping"] = RunService.Stepped:Connect(function()
				if LocalPlayer.Character then
					for i, Descendant in ipairs(LocalPlayer.Character:GetDescendants()) do
						if Descendant:IsA("BasePart") and Descendant.CanCollide == true then
							Descendant.CanCollide = false
						end
					end
				end
			end)
		else
			Connections["NoClipping"]:Disconnect()
		end
	end
end

local function ToggleTracers()
	if Tracers then
		for i, Player in ipairs(Players:GetPlayers()) do
			if Player ~= Players.LocalPlayer then
				local TracerLine = Drawing.new("Line")
				TracerLine.Color = Color3.fromRGB(255, 255, 255)

				if Player.Character then
					Connections[Player.Name .. "'s Tracers"] = RunService.RenderStepped:Connect(function()
						if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
							local Vector0, InViewport = CurrentCamera:WorldToViewportPoint(Player.Character.HumanoidRootPart.Position)

							if InViewport then
								TracerLine.Visible = true
								TracerLine.From = Vector2.new(CurrentCamera.ViewportSize.X / 2, CurrentCamera.ViewportSize.Y)
								TracerLine.To = Vector2.new(Vector0.X, Vector0.Y)
							else
								TracerLine.Visible = false
							end
						end
					end)
				end

				Connections["CharacterAdded"] = Player.CharacterAdded:Connect(function(Character)				
					TracerLine = Drawing.new("Line")
					TracerLine.Color = Color3.fromRGB(255, 255, 255)

					Connections[Player.Name .. "'s Tracers"] = RunService.RenderStepped:Connect(function()
						if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
							local Vector0, InViewport = CurrentCamera:WorldToViewportPoint(Player.Character.HumanoidRootPart.Position)

							if InViewport then
								TracerLine.Visible = true
								TracerLine.From = Vector2.new(CurrentCamera.ViewportSize.X / 2, CurrentCamera.ViewportSize.Y)
								TracerLine.To = Vector2.new(Vector0.X, Vector0.Y)
							else
								TracerLine.Visible = false
							end
						end
					end)

					Connections["Died"] = Character:WaitForChild("Humanoid").Died:Connect(function()
						if Connections[Player.Name .. "'s Tracers"] then
							Connections[Player.Name .. "'s Tracers"]:Disconnect()
						end

						TracerLine:Destroy()
					end)
				end)

				Connections["CharacterRemoving"] = Player.CharacterRemoving:Connect(function()
					if Connections[Player.Name .. "'s Tracers"] then
						Connections[Player.Name .. "'s Tracers"]:Disconnect()
					end

					TracerLine:Destroy()
				end)
			end
		end

		Connections["PlayerAdded"] = Players.PlayerAdded:Connect(function(Player)
			local TracerLine = Drawing.new("Line")
			TracerLine.Color = Color3.fromRGB(255, 255, 255)

			Connections["CharacterAdded"] = Player.CharacterAdded:Connect(function(Character)				
				TracerLine = Drawing.new("Line")
				TracerLine.Color = Color3.fromRGB(255, 255, 255)

				Connections[Player.Name .. "'s Tracers"] = RunService.RenderStepped:Connect(function()
					if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
						local Vector0, InViewport = CurrentCamera:WorldToViewportPoint(Player.Character.HumanoidRootPart.Position)

						if InViewport then
							TracerLine.Visible = true
							TracerLine.From = Vector2.new(CurrentCamera.ViewportSize.X / 2, CurrentCamera.ViewportSize.Y)
							TracerLine.To = Vector2.new(Vector0.X, Vector0.Y)
						else
							TracerLine.Visible = false
						end
					end
				end)

				Connections["Died"] = Character:WaitForChild("Humanoid").Died:Connect(function()
					if Connections[Player.Name .. "'s Tracers"] then
						Connections[Player.Name .. "'s Tracers"]:Disconnect()
					end

					TracerLine:Destroy()
				end)
			end)

			Connections["CharacterRemoving"] = Player.CharacterRemoving:Connect(function()
				if Connections[Player.Name .. "'s Tracers"] then
					Connections[Player.Name .. "'s Tracers"]:Disconnect()
				end

				TracerLine:Destroy()
			end)
		end)
	else
		for Name, Connection in pairs(Connections) do
			if Name == "PlayerAdded" or Name == "CharacterAdded" or Name == "CharacterRemoving" or Name:match("Tracers") or Name == "Died"  then
				Connection:Disconnect()
			end
		end

		Drawing.clear()
	end
end

local function ToggleGravity(Value)
	if Connections["Gravity"] then
		Connections["Gravity"]:Disconnect()
	end

	Connections["Gravity"] = RunService.Stepped:Connect(function()
		workspace.Gravity = Value
	end)
end

--//Functions
Player:Slider("WalkSpeed",{
	min = 16; 
	max = 1000; 
},function(Value)
	ToggleSpeed(Value)
end)

Player:Slider("JumpHeight",{
	min = 7.2; 
	max = 1000; 
},function(Value)
	ToggleJump(Value)
end)

Player:Button("Reset All", function()
	if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
		local Humanoid = LocalPlayer.Character.Humanoid

		if Connections["WalkSpeed"] then
			Connections["WalkSpeed"]:Disconnect()
		end

		if Connections["JumpHeight"] then
			Connections["JumpHeight"]:Disconnect()
		end
		
		if Connections["EnableJump"] then
			Connections["EnableJump"]:Disconnect()
		end

		Humanoid.WalkSpeed = 16
		Humanoid.JumpHeight = 7.2
	end
end)

Player:Toggle("TeleportWalk",function(Bool) 
	TeleportWalk = Bool 

	ToggleTeleportWalk()		
end)

Player:Toggle("Fly",function(Bool) 
	Fly = Bool 

	ToggleFly()		
end)

local Teleport = Player:Dropdown("Teleport", PlayerTable, false, function(Option)
	local Victim = Players:FindFirstChild(Option:split(" (")[1])

	if Victim and Victim.Character and Victim.Character:FindFirstChild("HumanoidRootPart") then
		LocalPlayer.Character.Humanoid.Sit = false
		LocalPlayer.Character:PivotTo(Victim.Character:GetPivot())
	end
end)

local Follow = Player:Dropdown("Follow", PlayerTable, false, function(Option)
	local Victim = Players:FindFirstChild(Option:split(" (")[1])

	if Victim and Victim.Character and Victim.Character:FindFirstChild("HumanoidRootPart") then
		ToggleFollow(Victim)
	end
end)

Player:Button("UnFollow", function()
	if Connections["Follow"] then
		Connections["Follow"]:Disconnect()
	end
	
	if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
		LocalPlayer.Character.Humanoid.Sit = false
		LocalPlayer.Character:PivotTo(OriginalPivot)
	end
end)

Explorer:Toggle("NoClip",function(Bool) 
	NoClip = Bool 

	ToggleNoClip()
end)

Explorer:Slider("Gravity",{
	min = 0; 
	max = 1000; 
},function(Value)
	if not Fly then
		ToggleGravity(Value)
	end
end)

Explorer:Button("Reset All", function()
	if not Fly and Connections["Gravity"] then
		Connections["Gravity"]:Disconnect()

		workspace.Gravity = 196.2
	end
end)

Visuals:Toggle("Tracers",function(Bool) 
	Tracers = Bool 

	ToggleTracers()
end)

local Spectate = Visuals:Dropdown("Spectate", PlayerTable, false, function(Option)
	local Victim = Players:FindFirstChild(Option:split(" (")[1])

	if Victim and Victim.Character and Victim.Character:FindFirstChild("Humanoid") then
		workspace.CurrentCamera.CameraSubject = Victim.Character.Humanoid
	end
end)

Visuals:Button("UnSpectate", function()
	if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
		workspace.CurrentCamera.CameraSubject = LocalPlayer.Character
	end
end)

Credits:Label("Scripting by Katrist#3130",{
	TextSize = 16,
	TextColor = Color3.fromRGB(171, 171, 171),
	BgColor = Color3.fromRGB(38, 38, 38),
})

Credits:Label("Gui by Wally's Gui Library",{
	TextSize = 16,
	TextColor = Color3.fromRGB(171, 171, 171),
	BgColor = Color3.fromRGB(38, 38, 38),
})

Credits:Label("canadigansLR5 for being a noob",{
	TextSize = 16,
	TextColor = Color3.fromRGB(171, 171, 171),
	BgColor = Color3.fromRGB(38, 38, 38),
})

KillSwitches:Button("Reset Everything", function()
	for i, Connection in ipairs(Connections) do
		Connection:Disconnect()
	end
	
	LocalPlayer.Character.Humanoid.WalkSpeed = 16
	LocalPlayer.Character.Humanoid.JumpHeight = 7.2
	workspace.Gravity = 196.2
end)

KillSwitches:DestroyGui()

--//Refreshing Dropdowns
local function RefreshDropdowns()
	table.clear(PlayerTable)

	for i, Player in ipairs(Players:GetChildren()) do
		if Player ~= LocalPlayer then
			table.insert(PlayerTable, Player.Name .. " (" .. Player.DisplayName .. ")")
		end
	end

	Teleport:Refresh(PlayerTable)
	Follow:Refresh(PlayerTable)
	Spectate:Refresh(PlayerTable)
end

Players.PlayerAdded:Connect(function()
	RefreshDropdowns()
end)

Players.PlayerRemoving:Connect(function()
	RefreshDropdowns()
end)
